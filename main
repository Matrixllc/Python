import logging
from exchanges.binance import BinanceClient
from exchanges.ftx import FtxClient
from data_collector import *
from utils import *
import datetime
import backtester
logger = logging.getLogger()
logger.setLevel(logging.DEBUG)

# formatter = logging.Formatter("%(asctime)s %(levelname)s :: %(messages)s")
formatter = logging.Formatter("%(asctime)s %(levelname)s :: %(message)s")


stream_handler = logging.StreamHandler()
stream_handler.setFormatter(formatter)
stream_handler.setLevel(logging.INFO)

file_handler = logging.FileHandler("info.log")
file_handler.setFormatter(formatter)
file_handler.setLevel(logging.DEBUG)

logger.addHandler(stream_handler)
logger.addHandler(file_handler)


if __name__ == "__main__":

    mode = input("Choose the program mode (data / backtesting / optimize) :").lower()

    # client = BinanceClient(False)


    while True:
        exchange = input("choose a exchange: ").lower()
        if exchange in ["binance", "ftx"]:
            break

    # while True:
    #     symbol = input("choose a symbol: ").upper()
    #     if symbol in client.symbols:
    #         break


    symbol = "BTCUSDT"
    if mode == "data":
        data_collect(client, exchange=exchange, symbol=symbol)
    elif mode == "backtesting":
        available_strategies = ["obv", "ichimoku", "sup_res", "sma"]
        while True:
            strategy = input(f"Choose a strategy:({','.join(available_strategies)}): ").lower()
            if strategy in available_strategies:
                break
        # Timeframe
        while True:
            tf = input(f"Choose a strategy:({','.join(TF_EQUIV)}): ").lower()
            if tf in TF_EQUIV.keys():
                break
        # from
        while True:
            from_time = input("Backtest from (yyyy -mm -dd or press Enter): ")
            if from_time == "":
                from_time = 0
                break
            try:
                from_time = int(datetime.datetime.strptime(from_time, "%y-%m-%d").timestamp()*1000)
                break
            except ValueError:
                continue

        # to
        while True:
            to_time = input("Backtest to (yyyy -mm -dd or press Enter): ")
            if to_time == "":
                to_time = int(datetime.datetime.now().timestamp()*1000)
                print(to_time)
                break
            try:
                to_time = int(datetime.datetime.strptime(from_time, "%y-%m-%d").timestamp() * 1000)
                print(to_time)
                break
            except ValueError:
                continue
        print(backtester.run(exchange, symbol, strategy, tf, from_time, to_time))







